module Elm.Make.Error exposing (Error(..), printError)

import Data.FilePath as FilePath exposing (FilePath)
import Elm.Package.Name as Name exposing (Name)
import Elm.Compiler.Module as Module
import Elm.Compiler.Error as CompilerError
import Elm.Make.CanonicalModule as CanonicalModule exposing (CanonicalModule)
import Elm.Package.Paths as Path
import Extra.String as String

type Error
    = CompilerErrors FilePath String (List CompilerError.Error)
    | CorruptedArtifact FilePath
    | Cycle (List CanonicalModule)
    | PackageProblem String
    | MissingPackage Name
    | ModuleNotFound Module.Raw (Maybe Module.Raw)
    | CompilerCrash
        { name : Module.Raw
        , source : String
        , message : String
        }
    | ModuleDuplicates
        { name : Module.Raw
        , parent : Maybe Module.Raw
        , local : List FilePath
        , foreign : List Name
        }
    | ModuleName
        { path : FilePath
        , expectedName : Module.Raw
        , actualName : Module.Raw
        }
    | UnpublishablePorts FilePath Module.Raw
    | UnpublishableEffects FilePath Module.Raw
    | TotallyWeirdError


printError : Error -> String
printError err =
  case err of
    CompilerErrors path source errors ->
        "TODO"

    CompilerCrash { name, source, message } ->
        "The compiler crashed while compiling "
            ++ Module.nameToString name
            ++ "\n\n"
            ++ "The crash message was:\n"
            ++ (message |> String.replace "<" "" |> String.replace ">" "")

    CorruptedArtifact filePath ->
        "Error reading build artifact "
            ++ filePath
            ++ "\n\n"
            ++ "The file was generated by a previous build and may be outdated or corrupt.\n"
            ++ "Remove the file and try again."

    Cycle moduleCycle ->
        "Your dependencies form a cycle:\n\n"
            ++ String.join ", " ((List.map (.name >> Module.nameToString)) moduleCycle)
            ++ "\n\nYou may need to move some values to a new module to get rid of the cycle."

    PackageProblem message ->
        message

    MissingPackage name ->
        "Could not find package "
            ++ Name.toString name ++ ".\n"
            ++ "\n"
            ++ "Maybe your elm-stuff/ directory has been corrupted? You can usually fix stuff\n"
            ++ "like this by deleting elm-stuff/ and rebuilding your project."

    ModuleNotFound name maybeParent ->
        "I cannot find module '"
            ++ Module.nameToString name
            ++ "'.\n\n"
            ++ toContext maybeParent
            ++ "\n"
            ++ "Potential problems could be:\n"
            ++ "  * Misspelled the module name\n"
            ++ "  * Need to add a source directory or new dependency to " ++ Path.description

    ModuleDuplicates { name, parent, local, foreign } ->
        let
            packages =
                List.map ((++) "package ") (List.map Name.toString foreign)

            paths =
                List.map ((++) "directory ") local
        in
        "I found multiple modules named '" ++ Module.nameToString name ++ "'.\n"
            ++ "\n"
            ++ toContext parent
            ++ "\n"
            ++ "Modules with that name were found in the following locations:\n\n"
            ++ (List.map (\str -> "    " ++ str ++ "\n") >> String.join "") (paths ++ packages)

    ModuleName { path, expectedName, actualName } ->
        "The module name is messed up for "
            ++ path
            ++ "\n\n"
            ++ "    According to the file's name it should be "
            ++ Module.nameToString expectedName
            ++ "\n    According to the source code it should be "
            ++ Module.nameToString actualName
            ++ "\n\nWhich is it?"

    UnpublishablePorts path name ->
        String.join "\n" <|
            [ "You are trying to publish `port module " ++ Module.nameToString name ++ "` which"
            , "is defined in: " ++ path
            , ""
            , "Modules with ports cannot be published. Imagine installing a new package, only"
            , "to find that it silently does not work at all unless you hook up some poorly"
            , "documented ports with specific names. And these port names may overlap with"
            , "names you are already using in your project! Suddenly it became much trickier"
            , "to add a dependency."
            , ""
            , "So basically, it would suck for everyone if any packages declared ports."
            , ""
            , "If you think the Elm community really need this in the package ecosystem for"
            , "some reason, ask around on the mailing list or Slack channel listed at"
            , "<http://elm-lang.org/community>. Folks are friendly and helpful, and there is"
            , "likely some other way!"
            ]

    UnpublishableEffects path name ->
        String.join "\n" <|
            [ "Your package includes `effect module " ++ Module.nameToString name ++ "` which"
            , "is defined in: " ++ path
            , ""
            , "Effect modules in the package ecosystem define \"The Elm Platform\", providing"
            , "nice APIs for things like web sockets, geolocation, and page visibility."
            , ""
            , "The only intent of effect modules is to help Elm communicate with EXTERNAL"
            , "services. If you want to write a wrapper around GraphQL or Phoenix Channels,"
            , "you are using effect modules as intended. If you are doing any other kind of"
            , "thing, it may be subverting \"The Elm Platform\" in relatively serious ways."
            , ""
            , "So to publish your own effect module, you need to go through a review process"
            , "to make sure these facilities are not being abused. Think of it as contributing"
            , "to the compiler or core libraries. Obviously someone is going to review that PR"
            , "in those cases. Same thing here."
            , ""
            , "To make this as smooth as possible, let folks on the elm-dev mailing list know"
            , "what you are up to as soon as possible."
            , ""
            , "    <https://groups.google.com/forum/#!forum/elm-dev>"
            , ""
            , "It is impossible to collaborate with people if you do not communicate. So come"
            , "and talk through your goals. See if it aligns with Elm overall or if there is"
            , "some nicer way. When things get to a point where you want to publish something,"
            , "open an issue in the following repo:"
            , ""
            , "    <https://github.com/elm-lang/package.elm-lang.org/issues>"
            , ""
            , "With a title like \"Effect manager review for _____\"."
            ]

    TotallyWeirdError ->
        "I have no idea what happened ðŸ˜³"


toContext : Maybe Module.Raw -> String
toContext maybeParent =
  case maybeParent of
    Nothing ->
        "This module is demanded in " ++ Path.description ++ ".\n"

    Just parent ->
        "Module '" ++ Module.nameToString parent ++ "' is trying to import it.\n"
